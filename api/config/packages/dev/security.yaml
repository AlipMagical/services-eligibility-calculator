# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

security:
  encoders:
    Symfony\Component\Security\Core\User\User: 'auto'
  providers:
    in_memory:
      memory:
        users:
          # password: user-test
          user:
            {
              password: '$argon2id$v=19$m=65536,t=4,p=1$INbm1Iv4X/VMtp+WZmGr5A$ULCsHj6wtsbGWS64MFfHPDCaN1yroLPpvn7b2ct74qg',
              roles: ['ROLE_USER'],
            }
          # password: admin-test
          admin:
            {
              password: '$argon2id$v=19$m=65536,t=4,p=1$MkvH5SiYCW4DuexXLTB9Fg$shbmMIL/+5WQO2xQ2lCY+TnV0Za6mP4X7oGV14khdjg',
              roles: ['ROLE_ADMIN'],
            }
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    login:
      pattern: ^/api/login
      stateless: true
      anonymous: true
      provider: in_memory
      json_login:
        check_path: /api/login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
        require_previous_session: false
    refresh:
      pattern: ^/api/token/refresh
      stateless: true
      anonymous: true
    api:
      pattern: ^/api
      stateless: true
      anonymous: true
      provider: in_memory
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
    - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }

gesdinet_jwt_refresh_token:
  user_provider: security.user.provider.concrete.in_memory
